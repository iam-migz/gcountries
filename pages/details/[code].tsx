/* eslint-disable @next/next/no-img-element */
import { Country } from '@/types';
import styles from '@/styles/Detail.module.css';
import Head from 'next/head';
import path from 'path';
import fs from 'fs';
import { formatNumber } from '@/utils';
import Link from 'next/link';
import { IoMdArrowRoundBack } from 'react-icons/io';
import { useRouter } from 'next/router';

interface Props {
	country: Country;
	borders: Country[];
}

function Details({ country, borders }: Props) {
	const title = `${country.name} | GCountries`;
	const router = useRouter();

	return (
		<>
			<Head>
				<title>{title}</title>
				<meta name="description" content="Generated by create next app" />
				<meta name="viewport" content="width=device-width, initial-scale=1" />
				<link rel="icon" href="/favicon.ico" />
			</Head>

			<div className={styles.container}>
				<button className={styles.back} onClick={() => router.back()}>
					<IoMdArrowRoundBack />
					Back
				</button>

				<main className={styles.main}>
					<div className={styles.flag}>
						<img src={country.flag} alt={`flag of ${country.name}`} />
					</div>
					<div className={styles.detail}>
						<h2>{country.name}</h2>
						<div className={styles.info}>
							<ul>
								<li>
									<span>Native Name:</span> {country.nativeName}
								</li>
								<li>
									<span>Other Names:</span> {country.altSpellings?.toString() ?? ''}
								</li>
								<li>
									<span>Demonym:</span> {country.demonym}
								</li>
								<li>
									<span>Currencies:</span> {country.currencies?.map((c) => c.name)}
								</li>
								<li>
									<span>Regional Bloc:</span>{' '}
									{country.regionalBlocs?.length ? country.regionalBlocs.map((m) => m.acronym) : 'None'}
								</li>
							</ul>
							<ul>
								<li>
									<span>Region:</span> {country.region}
								</li>
								<li>
									<span>Subregion:</span> {country.subregion}
								</li>
								<li>
									<span>Capital:</span> {country.capital ?? ''}
								</li>
								<li>
									<span>Population:</span> {formatNumber(country.population) ?? ''}
								</li>
							</ul>
						</div>
						<div className={styles.borders}>
							<h4>Border Countries:</h4>
							<ul className={styles.boxContainer}>
								{borders?.map((border) => (
									<Link href={`/details/${border.alpha3Code}`} key={border.alpha3Code}>
										<li className={styles.box}>{border.name}</li>
									</Link>
								))}
							</ul>
						</div>
					</div>
				</main>
			</div>
		</>
	);
}

export default Details;

export const getStaticPaths = async () => {
	const dataFilePath = path.join(process.cwd(), 'public', 'data', 'countries.json');
	const jsonData: Country[] = JSON.parse(fs.readFileSync(dataFilePath, 'utf8'));

	const paths = jsonData.map((d) => {
		return {
			params: {
				code: d.alpha3Code,
			},
		};
	});

	return {
		paths,
		fallback: false,
	};
};

export const getStaticProps = async (context: any) => {
	const { code } = context.params;
	const dataFilePath = path.join(process.cwd(), 'public', 'data', 'countries.json');
	const jsonData: Country[] = JSON.parse(fs.readFileSync(dataFilePath, 'utf8'));

	const country = jsonData.find((d) => d.alpha3Code === code);
	const borders = jsonData
		.filter((d) => country?.borders?.find((border) => border === d.alpha3Code))
		.sort((a, b) => a.name.localeCompare(b.name));

	return {
		props: {
			country,
			borders,
		},
	};
};
